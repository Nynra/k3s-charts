global:
  commonAnnotations: {}
  commonLabels: {}

  # For adguard dns so it doesnt try to take 200Gi of storage
  fallbackDefaults:
    pvcSize: 2Gi
    vctSize: 2Gi

networkPolicy:
  enabled: false

adguardCredentials:
  externalSecret:
    enabled: false
    secretName: adguard-configuration
    secretStore: kubernetes
    secretStoreType: SecretStore 
    properties:
      url: url
      user: user
      password: password
  reflectedSecret:
    enabled: true
    originNamespace: adguard
    originSecretName: adguard-configuration

adguardDashboard:
  enabled: false
  ingressUrl: "adguardhome.example.com"
  middlewares:
    - name: traefik-default-chain 
      namespace: traefik
  entrypoint: websecure
  cert:
    externalSecret:
      enabled: false
      secretName: "example-com-tls"
      secretStore: "certs-vault"
      secretStoreType: "ClusterSecretStore"
    reflectedSecret:
      enabled: true
      originNamespace: "external-secrets"
      originSecretName: "example-com-tls"

# https://github.com/trueforge-org/truecharts/blob/master/charts/stable/adguard-home/values.yaml
adguard-home: 
  enabled: false 
  service: 
    main: 
      # Loadbalancer is usefull during setup or
      # or if you want to expose to external services
      # type: LoadBalancer
      type: ClusterIP
      loadBalancerIP: ""
      # port: 8080
      protocol: http
        
external-dns:
  # Flag for the parent chart
  enabled: true
  resources: {}
  nodeSelector: {}
  affinity: {}
  topologySpreadConstraints: []
  tolerations: []

  serviceMonitor:
    enabled: false 

  # if `true`, _ExternalDNS_ will run in a namespaced scope (`Role`` and `Rolebinding`` will be namespaced too).
  # this means only ingresses and services in the deployment namespace will be detected
  namespaced: false

  # Kubernetes resources to monitor for DNS entries.
  sources:
    - crd
    - service
    # - ingress
    - traefik-proxy

  # How DNS records are synchronized between sources and providers; available values are `create-only`, `sync`, & `upsert-only`.
  policy: sync  # create-only, sync, upsert-only,  default: "upsert-only"

  rbac:
    create: true
    additionalPermissions: []

  logLevel: info
  logFormat: text

  # Do not change the owner ID after initial deployment
  txtOwnerId: "TestOwner"

  # Limit possible target zones by domain suffixes.
  # domainFilters: 
  #   - example.com

  # Intentionally exclude domains from being managed.
  excludeDomains: []

  # Filter resources queried for endpoints by label selector.
  labelFilter:  # default: null

  # Filter resources queried for endpoints by annotation selector.
  annotationFilter:  # default: null

  # Record types to manage (default: A, AAAA, CNAME)
  managedRecordTypes:
    - A
    - AAAA
    - CNAME
    # Also supported are:
    # - TXT
    # - SRV
    # - NS
    # - PTR
    # - MX

  provider:
    name: webhook
    webhook:
      image:
        repository: ghcr.io/zekker6/external-dns-provider-adguard
        tag: v1.2.0
        pullPolicy: IfNotPresent
      env:
        - name: ADGUARD_HOME_URL
          value: "http://{{ .Release.Name }}-adguard-home.{{ .Release.Namespace}}:10232"
          # valueFrom:
          #   secretKeyRef:
          #     name: adguard-configuration
          #     key: url
        - name: ADGUARD_HOME_USER
          valueFrom:
            secretKeyRef:
              name: adguard-configuration
              key: username
        - name: ADGUARD_HOME_PASS
          valueFrom:
            secretKeyRef:
              name: adguard-configuration
              key: password
      securityContext:
        runAsUser: 0
        runAsNonRoot: false
        allowPrivilegeEscalation: true
      livenessProbe:
        httpGet:
          path: /healthz  
          port: 8888  
      readinessProbe:
        httpGet:
          path: /healthz 
          port: 8888 

      service:
        port: 8888

  extraArgs:
    - --webhook-provider-url=http://localhost:8888
        